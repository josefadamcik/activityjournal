version: 2
## source : https://medium.com/@ayltai/all-you-need-to-know-about-circleci-2-0-with-firebase-test-lab-2a66785ff3c2

references:

  ## Cache
  cache_key: &cache_key
    key: cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key
  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle
        - ~/.m2

  ## Workspace

  workspace: &workspace
    ~/workspace
  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace
  attach_release_workspace: &attach_release_workspace
    attach_workspace:
      at: *workspace
  persist_debug_workspace: &persist_debug_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build/intermediates
        - app/build/outputs/androidTest-results
        - app/build/outputs/apk
        - app/build/outputs/code-coverage
        - app/build/test-results
  persist_release_workspace: &persist_release_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build
  attach_firebase_workspace: &attach_firebase_workspace
    attach_workspace:
      at: *workspace
  persist_firebase_workspace: &persist_firebase_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - firebase

  ## Docker image configurations

  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'

  ## Although gcloud tools are included in the circleci image, they are in the latest version which, in the
  ## time of writing, is 217.0.0 and contains a bug that breaks code coverage support. It can be solved by downgrading to
  ## the 216.0.0 version, but it's not possible to use "gcloud components update --version 216.0.0" on the circleci image.
  ## Therefore we use another image with older version.
  gcloud_config: &gcloud_config
    working_directory: *workspace
    docker:
      - image: google/cloud-sdk:216.0.0
    environment:
      TERM: dumb
  ## Keys

  # Android Key Store

#  export_android_key: &export_android_key
#    run:
#      name: Export Android key store environment variable
#      command: echo 'export ANDROID_KEY_STORE="$ANDROID_KEY_STORE"' >> $BASH_ENV
#  decode_android_key: &decode_android_key
#    run:
#      name: Decode Android key store
#      command: echo $ANDROID_KEY_STORE | base64 -di > key-store.jks

  # Google Services

#  export_gservices_key: &export_gservices_key
#    run:
#      name: Export Google Services key environment variable
#      command: echo 'export GOOGLE_SERVICES_KEY="$GOOGLE_SERVICES_KEY"' >> $BASH_ENV
#  decode_gservices_key: &decode_gservices_key
#    run:
#      name: Decode Google Services key
#      command: echo $GOOGLE_SERVICES_KEY | base64 -di > app/google-services.json

  # Google Cloud Service

  export_gcloud_key: &export_gcloud_key
    run:
      name: Store Google Service Account
      command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

  # Fabric

#  export_fabric_key: &export_fabric_key
#    run:
#      name: Export Fabric key
#      command: echo 'export FABRIC_KEY="$FABRIC_KEY"' >> $BASH_ENV
#  decode_fabric_key: &decode_fabric_key
#    run:
#      name: Decode Fabric key
#      command: echo $FABRIC_KEY | base64 -di > app/fabric.properties

jobs:

  ## Build debug APK and instrumented test APK

  build_debug:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
#      - *export_gservices_key
#      - *decode_gservices_key
      - run:
          name: Gradle build (debug)
          command: ./gradlew -PciBuild=true :app:assembleDebug :app:assembleAndroidTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/

  ## Build release APK

  build_release:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
#      - *export_android_key
#      - *decode_android_key
#      - *export_gservices_key
#      - *decode_gservices_key
#      - *export_fabric_key
#      - *decode_fabric_key
      - run:
          name: Gradle build (release)
          command: ./gradlew -PciBuild=true :app:assembleRelease
      - *persist_release_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/
      - store_artifacts:
          path: app/build/outputs/mapping/
          destination: /mapping/

  ## Check code quality

#  check_quality:
#    <<: *android_config
#    steps:
#      - checkout
#      - *restore_cache
#      - run:
#          name: Download dependencies
#          command: ./gradlew androidDependencies
#      - *save_cache
#      - *export_gservices_key
#      - *decode_gservices_key
#      - run:
#          name: Run Checkstyle
#          command: ./gradlew -PciBuild=true :app:customCheckstyle
#      - run:
#          name: Run FindBugs
#          command: ./gradlew -PciBuild=true :app:customFindBugs
#      - *persist_debug_workspace
#      - store_artifacts:
#          path: app/build/reports/
#          destination: /reports/

  ## Run unit tests

  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
#      - *export_gservices_key
#      - *decode_gservices_key
      - run:
          name: Run unit tests
          command: ./gradlew -PciBuild=true :app:testDebugUnitTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/

  ## Run instrumented tests

  ## Note: removed sudo in order to make it work with gcloud images
  test_instrumented:
    <<: *gcloud_config
    steps:
      - *attach_debug_workspace
      - *export_gcloud_key
      - run:
          name: Authorize gcloud and set config defaults
          command: |
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Run instrumented test on Firebase Test Lab
          command: >
            gcloud firebase test android run \
              --type instrumentation \
              --app app/build/outputs/apk/debug/app-debug.apk \
              --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
              --device model=Nexus6,version=21,locale=en,orientation=portrait \
              --timeout 20m \
              --environment-variables coverage=true,coverageFile=/sdcard/coverage.ec --directories-to-pull=/sdcard/
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run:
          name: Install gsutil dependency and copy test results data
          command: |
            gsutil -m cp -r -U "`gsutil ls gs://test-lab-5x2v4n5ait0uk-h9vfm1c4z2344 | tail -1`*" firebase/ | true
      - *persist_firebase_workspace
      - store_artifacts:
          path: firebase/
          destination: /firebase/

  ## Submit JaCoCo coverage report

  report_coverage:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *attach_debug_workspace
      - *attach_firebase_workspace
#      - run:
#          name: Move Firebase coverage report
#          command: mkdir -p app/build/outputs/code-coverage/connected && cp firebase/sailfish-26-en_US-portrait/artifacts/coverage.ec app/build/outputs/code-coverage/connected/coverage.ec
#      - *export_gservices_key
#      - *decode_gservices_key
      - run:
          name: Generate JaCoCo report
          command: ./gradlew -PciBuild=true jacocoTestReport
      - run:
          name: Upload coverage report to CodeCov
          command: bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/

  ## Deploy release APK to Fabric Beta

#  deploy:
#    <<: *android_config
#    steps:
#      - checkout
#      - *attach_release_workspace
#      - *restore_cache
#      - run:
#          name: Download dependencies
#          command: ./gradlew androidDependencies
#      - *export_fabric_key
#      - *decode_fabric_key
#      - run:
#          name: Deploy to Fabric Beta
#          command: ./gradlew -PciBuild=true :app:crashlyticsUploadDistributionRelease

workflows:
  version: 2
  workflow:
    jobs:
      - build_debug
      - build_release
#      - check_quality:
#          requires:
#            - build_debug
      - test_unit:
          requires:
            - build_debug
      - test_instrumented:
          requires:
            - build_debug
      - report_coverage:
          requires:
            - test_unit
            - test_instrumented
#      - deploy:
#          filters:
#            branches:
#              only:
#                - master
#          requires:
#            - build_release
#            - check_quality
#            - test_unit
#            - test_instrumented