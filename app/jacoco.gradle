apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.2"
    reportsDir = file("$buildDir/reports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, group: 'verification' ,dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*','**/*$ViewInjector*.*']
    def debugTree = files([
            fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter),
            fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter),
            ])
    def mainSrc = "$project.projectDir/src/main/java"

//    println "COVERAGE class files"
//    debugTree.collect({ println relativePath(it) })

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files([
        fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec'
        ]),
        fileTree(dir: "$project.rootDir/firebase/", includes: [
                '**/artifacts/coverage.ec'
        ])
    ])

//    println "COVERAGE execution data"
//    executionData.collect({ println relativePath(it) })
}
